[general]
# The owners of the bot
owners = [158280426551640064]
# Time to wait for user interactions in seconds
interaction_timeout = 60
# Maximum size of the command history for autocompletion per user and command
command_history_size = 500
# Maximum amount of autocomplete suggestions to send back to the user
autocomplete_size = 10
# Default cooldown for up-/downvotes in seconds
default_cooldown = 30
# Amount of users per leaderboard page
leaderboard_size = 10
# Titles for the leaderboard ranks
leaderboard_titles = ["üëë", "‚öîÔ∏è", "üó°Ô∏è"]
# The maximum amount of credits a user can have (each command has a certain cost, one credit expires every second)
credits_margin = 60
# Time to wait for a user to pick up dropped reactions
pickup_timeout = 3600
# Maximum number of characters per message the NLP model should look at
nlp_max_message_length = 1500
# Maximum amount of messages to feed into the NLP model
nlp_max_messages = 60
# Size of collections messages should get grouped into before being fed into the NLP model
nlp_group_size = 20
# Amount of reminders per reminder list page
reminder_list_size = 10
# Max message length of a message in the reminder list
reminder_list_max_message_length = 500

[commands]
# Global
# For the permission field, use https://discordapi.com/permissions.html
[commands.about]
command_type = "About"
description = "Display information about the bot."

[commands.module]
command_type = "Module"
description = "Update the activated modules."
permission = "8"
cost = 30

[commands.module.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["enable", "disable", "remove"]

[commands.module.options.module]
kind = "String"
description = "The module to update."
required = true
choices = ["Owner", "Utility", "Score", "ReactionRoles", "Analyze"]

[commands.modules]
command_type = "Modules"
description = "See which modules are enabled."

[commands.ping]
command_type = "Ping"
description = "Ping the bot."

# Bot management
[commands.clean]
command_type = "Clean"
description = "Remove unused rows from the database."
module = "Owner"
permission = "8"
owner = true

[commands.guild]
command_type = "Guild"
description = "Manage guilds created by the bot."
module = "Owner"
permission = "8"
owner = true

[commands.guild.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["create", "edit"]

[commands.say]
command_type = "Say"
description = "Make the bot say something."
module = "Owner"
owner = true

[commands.say.options.title]
kind = "String"
description = "The title of the embed."
required = true
autocomplete = true

[commands.say.options.content]
kind = "String"
description = "The content of the embed."
required = true
autocomplete = true

[commands.sql]
command_type = "Sql"
description = "Execute a SQL query."
module = "Owner"
permission = "8"
owner = true
cost = 10

[commands.sql.options.query]
kind = "String"
description = "The SQL query to execute."
required = true
autocomplete = true

# Utility
[commands.clear]
command_type = "Clear"
description = "Clear a certain amount of recent messages."
module = "Utility"
permission = "8192"
cost = 15

[commands.clear.options.count]
kind = "Integer"
description = "The amount of messages to delete."
required = true
min_value = 1
max_value = 100

[commands.clear.options.before]
kind = "String"
description = "The message id from which to start deleting messages."

[commands.reminder]
command_type = "Reminder"
description = "Scheduler a reminder in a certain amount of time."
module = "Utility"
cost = 15

[commands.reminder.options.message]
kind = "String"
description = "The message to send after the time has passed."
required = true
autocomplete = true

[commands.reminder.options.minutes]
kind = "Integer"
description = "The amount of minutes to wait before sending the reminder."
required = true
min_value = 0
max_value = 59

[commands.reminder.options.hours]
kind = "Integer"
description = "The amount of hours to wait before sending the reminder."
min_value = 0
max_value = 23

[commands.reminder.options.days]
kind = "Integer"
description = "The amount of days to wait before sending the reminder."
min_value = 0
max_value = 365

[commands.reminders]
command_type = "Reminders"
description = "See which reminders are currently pending."
module = "Utility"

[commands.reminders.options.user]
kind = "User"
description = "The user to query."

# Score
[commands.cooldown]
command_type = "Cooldown"
description = "Define a custom reaction cooldown for certain roles."
module = "Score"
permission = "8"

[commands.cooldown.options.role]
kind = "Role"
description = "The role to update."
required = true

[commands.cooldown.options.cooldown]
kind = "Integer"
description = "The cooldown in seconds (reset the cooldown if no cooldown is given)."
min_value = 0

[commands.cooldowns]
command_type = "Cooldowns"
description = "See the reaction cooldown of all roles."
module = "Score"

[commands.drop]
command_type = "Drop"
description = "Set channels which reactions should get dropped into when a user leaves the guild."
module = "Score"
permission = "8"

[commands.drop.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["add", "remove"]

[commands.drop.options.channel]
kind = "Channel"
description = "The channel to update."
required = true
channel_types = ["Text"]

[commands.drops]
command_type = "Drops"
description = "See which channels reactions should get dropped into if a user leaves."
module = "Score"

[commands.emoji]
command_type = "Emoji"
description = "Manage which emojis should count as up- and downvotes."
module = "Score"
permission = "8"

[commands.emoji.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["add upvote", "add downvote", "remove"]

[commands.emoji.options.emoji]
kind = "String"
description = "The emoji to update."
required = true

[commands.emojis]
command_type = "Emojis"
description = "See which emojis are listed as up- or downvotes."
module = "Score"

[commands.gift]
command_type = "Gift"
description = "Send a certain amount of your reactions to another user."
module = "Score"

[commands.gift.options.user]
kind = "User"
description = "The user to send reactions to."
required = true

[commands.gift.options.score]
kind = "Integer"
description = "The amount of reactions to gift."
required = true
min_value = 1

[commands.given]
command_type = "Given"
description = "Display stats about the votes given to other users."
module = "Score"

[commands.given.options.user]
kind = "User"
description = "The user to query."

[commands.levelup]
command_type = "LevelUp"
description = "Manage the roles assigned by the bot on a certain score."
module = "Score"
permission = "8"

[commands.levelup.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["add", "remove"]

[commands.levelup.options.role]
kind = "Role"
description = "The role to update."
required = true

[commands.levelup.options.score]
kind = "Integer"
description = "The required score for the role."
required = true

[commands.levelups]
command_type = "LevelUps"
description = "See which role gets awarded on which score."
module = "Score"

[commands.moderation]
command_type = "Moderation"
description = "Automatically pin/delete messages based on their votes."
module = "Score"
permission = "8"

[commands.moderation.options.moderation]
kind = "String"
description = "What to do to the message after reaching the score."
required = true
choices = ["pin", "delete"]

[commands.moderation.options.score]
kind = "Integer"
description = "The score to reach (disable the moderation if no score is given)."

[commands.moderations]
command_type = "Moderations"
description = "See what auto-moderation features are enabled."
module = "Score"

[commands.rank]
command_type = "Rank"
description = "Display the rank of a user."
module = "Score"

[commands.rank.options.user]
kind = "User"
description = "The user to query."

[commands.score]
command_type = "Score"
description = "Display the score of a user."
module = "Score"

[commands.score.options.user]
kind = "User"
description = "The user to query."

[commands.scores]
command_type = "Scores"
description = "Display the users with the highest scores."
module = "Score"

# Reaction Roles
[commands.reactionrole]
command_type = "ReactionRole"
description = "Manage the roles assigned when a user reacts on a certain message."
module = "ReactionRoles"
permission = "8"

[commands.reactionrole.options.action]
kind = "String"
description = "What to do."
required = true
choices = ["add", "remove"]

[commands.reactionrole.options.role]
kind = "Role"
description = "The role to assign."
required = true

[commands.reactionrole.options.slots]
kind = "Integer"
description = "The maximum number of users which can hold the reaction-role at the same time."
min_value = 0

[commands.reactionroles]
command_type = "ReactionRoles"
description = "See which roles will get assigned when reacting to which message."
module = "ReactionRoles"

# Analyze
[commands.mood]
command_type = "Mood"
description = "Analyze the general mood in the chat or the mood of a certain user."
module = "Analyze"
cost = 10

[commands.mood.options.user]
kind = "User"
description = "The user to query."

[commands.oracle]
command_type = "Oracle"
description = "Answer a question."
module = "Analyze"
cost = 15

[commands.oracle.options.question]
kind = "String"
description = "The question to ask."
required = true
autocomplete = true

[commands.tldr]
command_type = "Tldr"
description = "Display a short summary of the last messages."
module = "Analyze"
cost = 20
